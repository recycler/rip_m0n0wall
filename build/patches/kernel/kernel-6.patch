--- sys/conf/options.orig	2008-02-17 21:32:18.000000000 +0100
+++ sys/conf/options	2008-02-23 19:33:50.000000000 +0100
@@ -362,6 +362,10 @@
 IPFILTER_LOG		opt_ipfilter.h
 IPFILTER_LOOKUP		opt_ipfilter.h
 IPFILTER_DEFAULT_BLOCK	opt_ipfilter.h
+# Existing options made configurable for m0n0wall
+IPSTATE_SIZE           opt_ipfilter.h
+IPSTATE_MAX            opt_ipfilter.h
+# End of m0n0wall additions
 IPFIREWALL		opt_ipfw.h
 IPFIREWALL_VERBOSE	opt_ipfw.h
 IPFIREWALL_VERBOSE_LIMIT	opt_ipfw.h
--- sys/contrib/ipfilter/netinet/fil.c.orig	2007-12-01 01:53:16.000000000 +0100
+++ sys/contrib/ipfilter/netinet/fil.c	2008-02-23 19:34:31.000000000 +0100
@@ -103,6 +103,12 @@
 # include <sys/hashing.h>
 # include <netinet/in_var.h>
 #endif
+#if defined(__FreeBSD_version) && (__FreeBSD_version >= 300000)
+# include <sys/malloc.h>
+# if defined(_KERNEL) && !defined(IPFILTER_LKM)
+#  include "opt_ipfilter.h"
+# endif
+#endif
 #include <netinet/tcp.h>
 #if (!defined(__sgi) && !defined(AIX)) || defined(_KERNEL)
 # include <netinet/udp.h>
@@ -142,12 +148,6 @@
 #if defined(IPFILTER_BPF) && defined(_KERNEL)
 # include <net/bpf.h>
 #endif
-#if defined(__FreeBSD_version) && (__FreeBSD_version >= 300000)
-# include <sys/malloc.h>
-# if defined(_KERNEL) && !defined(IPFILTER_LKM)
-#  include "opt_ipfilter.h"
-# endif
-#endif
 #include "netinet/ipl.h"
 /* END OF INCLUDES */
 
--- sys/contrib/ipfilter/netinet/mlfk_ipl.c.orig	2007-11-18 12:03:29.000000000 +0100
+++ sys/contrib/ipfilter/netinet/mlfk_ipl.c	2008-02-23 19:35:35.000000000 +0100
@@ -23,6 +23,11 @@
 #include <netinet/in_systm.h>
 #include <netinet/in.h>
 
+#if __FreeBSD_version >= 300000
+# if defined(_KERNEL) && !defined(IPFILTER_LKM)
+#  include "opt_ipfilter.h"
+# endif
+#endif
 
 #include <netinet/ipl.h>
 #include <netinet/ip_compat.h>
--- sys/contrib/ipfilter/netinet/ip_state.c.orig	2007-11-18 12:03:29.000000000 +0100
+++ sys/contrib/ipfilter/netinet/ip_state.c	2008-07-26 15:43:35.000000000 +0200
@@ -150,15 +150,15 @@
 #define	FIVE_DAYS	(5 * ONE_DAY)
 #define	DOUBLE_HASH(x)	(((x) + ips_seed[(x) % fr_statesize]) % fr_statesize)

-u_long	fr_tcpidletimeout = FIVE_DAYS,
+u_long	fr_tcpidletimeout = IPF_TTLVAL(9000),
 	fr_tcpclosewait = IPF_TTLVAL(2 * TCP_MSL),
 	fr_tcplastack = IPF_TTLVAL(30),
 	fr_tcptimeout = IPF_TTLVAL(2 * TCP_MSL),
 	fr_tcptimewait = IPF_TTLVAL(2 * TCP_MSL),
 	fr_tcpclosed = IPF_TTLVAL(30),
-	fr_tcphalfclosed = IPF_TTLVAL(2 * 3600),	/* 2 hours */
+	fr_tcphalfclosed = IPF_TTLVAL(240),
 	fr_udptimeout = IPF_TTLVAL(120),
-	fr_udpacktimeout = IPF_TTLVAL(12),
+	fr_udpacktimeout = IPF_TTLVAL(240),
 	fr_icmptimeout = IPF_TTLVAL(60),
 	fr_icmpacktimeout = IPF_TTLVAL(6),
 	fr_iptimeout = IPF_TTLVAL(60);
--- sys/net/pfil.c.orig	2005-05-23 19:07:16.000000000 +0200
+++ sys/net/pfil.c	2008-02-23 19:37:41.000000000 +0100
@@ -354,13 +354,15 @@
 		    pfh->pfil_arg == pfh1->pfil_arg)
 			return EEXIST;
 	/*
-	 * insert the input list in reverse order of the output list
-	 * so that the same path is followed in or out of the kernel.
+	 * m0n0wall: insert hooks in reverse order (with respect to default
+	 * FreeBSD behavior) to ensure that the dynamically loaded ipfw
+	 * is called before ipfilter for outbound and after ipfilter for
+	 * inbound packets (due to NAT).
 	 */
 	if (flags & PFIL_IN)
-		TAILQ_INSERT_HEAD(list, pfh1, pfil_link);
-	else
 		TAILQ_INSERT_TAIL(list, pfh1, pfil_link);
+	else
+		TAILQ_INSERT_HEAD(list, pfh1, pfil_link);
 
 	return 0;
 }
--- sys/netinet/ip_input.c.orig	2007-04-03 10:16:05.000000000 +0200
+++ sys/netinet/ip_input.c	2008-07-09 21:47:45.000000000 +0200
@@ -389,18 +389,22 @@
 		}
 	}

-	if (m->m_pkthdr.csum_flags & CSUM_IP_CHECKED) {
-		sum = !(m->m_pkthdr.csum_flags & CSUM_IP_VALID);
-	} else {
-		if (hlen == sizeof(struct ip)) {
-			sum = in_cksum_hdr(ip);
+	/* skip checksum checks if we came from dummynet, since we'll already
+	   have been here in that case */
+	if (!(m->m_flags & M_IPIN_SKIPPFIL)) {
+		if (m->m_pkthdr.csum_flags & CSUM_IP_CHECKED) {
+			sum = !(m->m_pkthdr.csum_flags & CSUM_IP_VALID);
 		} else {
-			sum = in_cksum(m, hlen);
+			if (hlen == sizeof(struct ip)) {
+				sum = in_cksum_hdr(ip);
+			} else {
+				sum = in_cksum(m, hlen);
+			}
+		}
+		if (sum) {
+			ipstat.ips_badsum++;
+			goto bad;
 		}
-	}
-	if (sum) {
-		ipstat.ips_badsum++;
-		goto bad;
 	}

 #ifdef ALTQ
@@ -463,6 +467,21 @@
 	/* Jump over all PFIL processing if hooks are not active. */
 	if (inet_pfil_hook.ph_busy_count == -1)
 		goto passin;
+	if (m->m_flags & M_IPIN_SKIPPFIL) {
+		/* m0n0wall: packet has already been through dummynet, and therefore
+		   also through ipnat (reversed processing order in m0n0wall);
+		   we skip the pfil hooks to avoid ipnat being called again on
+		   this packet (this implicitly assumes that one_pass=1).
+		   However, we need to remove the dummynet tag, otherwise the
+		   packet will be treated improperly in ip_output. */
+		struct m_tag *dn_tag;
+		dn_tag = m_tag_find(m, PACKET_TAG_DUMMYNET, NULL);
+		if (dn_tag != NULL)
+			m_tag_delete(m, dn_tag);
+		
+		m->m_flags &= ~M_IPIN_SKIPPFIL;
+		goto passin;
+	}

 	odst = ip->ip_dst;
 	if (pfil_run_hooks(&inet_pfil_hook, &m, m->m_pkthdr.rcvif,
--- sys/netinet/ip_dummynet.c.orig	2008-10-31 14:01:31.000000000 +0100
+++ sys/netinet/ip_dummynet.c	2009-04-20 18:47:05.000000000 +0200
@@ -899,6 +899,7 @@
 			ip = mtod(m, struct ip *);
 			ip->ip_len = htons(ip->ip_len);
 			ip->ip_off = htons(ip->ip_off);
+			m->m_flags |= M_IPIN_SKIPPFIL;
 			netisr_dispatch(NETISR_IP, m);
 			break;
 #ifdef INET6
--- sys/modules/ipfw/Makefile.orig	2006-09-19 17:45:21.000000000 +0200
+++ sys/modules/ipfw/Makefile	2008-02-23 19:43:06.000000000 +0100
@@ -13,8 +13,8 @@
 #CFLAGS+= -DIPFIREWALL_VERBOSE_LIMIT=100
 #
 #If you want it to pass all packets by default
-#CFLAGS+= -DIPFIREWALL_DEFAULT_TO_ACCEPT
-#
+CFLAGS+= -DIPFIREWALL_DEFAULT_TO_ACCEPT
+CFLAGS+= -DIPFIREWALL_FORWARD
 
 .if !defined(KERNBUILDDIR)
 .if !defined(NO_INET6)
--- sys/kern/vfs_mount.c.orig	2007-05-10 11:18:07.000000000 +0200
+++ sys/kern/vfs_mount.c	2008-02-23 19:43:42.000000000 +0100
@@ -1602,7 +1602,7 @@
 		strcpy(path, ROOTNAME);
 
 	error = kernel_vmount(
-	    MNT_RDONLY | MNT_ROOTFS,
+	    MNT_ROOTFS,
 	    "fstype", vfsname,
 	    "fspath", "/",
 	    "from", path,
--- sys/sys/mbuf.h.orig	2008-02-17 21:32:18.000000000 +0100
+++ sys/sys/mbuf.h	2008-02-23 19:44:10.000000000 +0100
@@ -179,6 +179,7 @@
 #define	M_FIRSTFRAG	0x1000	/* packet is first fragment */
 #define	M_LASTFRAG	0x2000	/* packet is last fragment */
 #define	M_VLANTAG	0x10000	/* packet has VLAN tag attached */
+#define	M_IPIN_SKIPPFIL	0x20000 /* m0n0wall: skip pfil processing in ip_input */
 
 /*
  * External buffer types: identify ext_buf type.
--- sys/i386/i386/vm_machdep.c.orig	2007-04-30 19:45:44.000000000 +0200
+++ sys/i386/i386/vm_machdep.c	2008-02-23 19:44:49.000000000 +0100
@@ -605,6 +605,12 @@
 		outl(0xcfc, 0xf);
 	}
 
+	if (strcmp(cpu_vendor, "AuthenticAMD") == 0 &&
+	    (cpu_id & 0xfff0) == 0x05a0) {
+		/* PC Engines ALIX reset via CS5536 DIVIL_SOFT_RESET */
+		wrmsr(0x51400017, 1LL);
+	}
+
 #ifdef PC98
 	/*
 	 * Attempt to do a CPU reset via CPU reset port.
--- sys/dev/usb/ehci_pci.c.orig	2008-10-02 04:57:24.000000000 +0200
+++ sys/dev/usb/ehci_pci.c	2009-04-20 18:46:14.000000000 +0200
@@ -95,8 +95,10 @@
 static const char *ehci_device_m5239 = "ALi M5239 USB 2.0 controller";
 
 /* AMD */
-#define PCI_EHCI_DEVICEID_8111		0x10227463
+#define PCI_EHCI_DEVICEID_8111		0x74631022
+#define PCI_EHCI_DEVICEID_CS5536	0x20951022
 static const char *ehci_device_8111 = "AMD 8111 USB 2.0 controller";
+static const char *ehci_device_CS5536 = "AMD CS5536 USB 2.0 controller";
 
 /* ATI */
 #define PCI_EHCI_DEVICEID_SB200		0x43451002
@@ -214,6 +216,8 @@
 		return (ehci_device_m5239);
 	case PCI_EHCI_DEVICEID_8111:
 		return (ehci_device_8111);
+	case PCI_EHCI_DEVICEID_CS5536:
+		return (ehci_device_CS5536);
 	case PCI_EHCI_DEVICEID_SB200:
 		return (ehci_device_sb200);
 	case PCI_EHCI_DEVICEID_SB400:
@@ -429,6 +433,8 @@
 				continue;
 			}
 			bsc = device_get_softc(nbus[0]);
+			if (bsc == 0 || bsc->bdev == 0)
+				continue;
 			free(nbus, M_TEMP);
 			DPRINTF(("ehci_pci_attach: companion %s\n",
 			    USBDEVNAME(bsc->bdev)));
--- sys/contrib/ipfilter/netinet/ip_ftp_pxy.c.orig	2007-11-18 12:03:28.000000000 +0100
+++ sys/contrib/ipfilter/netinet/ip_ftp_pxy.c	2008-02-23 19:47:00.000000000 +0100
@@ -1114,8 +1114,8 @@
 
 		if (tcp->th_flags & TH_FIN) {
 			if (thseq == f->ftps_seq[1]) {
-				f->ftps_seq[0] = f->ftps_seq[1] - seqoff;
-				f->ftps_seq[1] = thseq + 1 - seqoff;
+				f->ftps_seq[0] = f->ftps_seq[1];
+				f->ftps_seq[1] = thseq + 1;
 			} else {
 				if (ippr_ftp_debug > 1) {
 					printf("FIN: thseq %x seqoff %d ftps_seq %x %x\n",
--- sys/contrib/ipfilter/netinet/ip_nat.c.orig	2008-10-02 04:57:24.000000000 +0200
+++ sys/contrib/ipfilter/netinet/ip_nat.c	2009-08-04 23:00:53.000000000 +0200
@@ -2279,7 +2289,7 @@
 			     (u_int)fin->fin_p, inb, fin->fin_src);
 	fin->fin_data[0] = sp;
 	fin->fin_data[1] = dp;
-	if (natl != NULL)
+	if (natl != NULL && natl->nat_redir == NAT_REDIRECT)
 		return -1;
 
 	nat->nat_inip.s_addr = htonl(in.s_addr);
--- sys/i386/i386/geode.c.orig	2008-02-16 11:04:49.000000000 +0100
+++ sys/i386/i386/geode.c	2008-08-23 17:40:58.000000000 +0200
@@ -68,6 +68,15 @@
 	}
 };
 
+static struct bios_oem bios_pcengines_55 = {
+	{ 0xf9000, 0xfa000 },
+	{
+		{ "PC Engines ALIX", 0, 28 },	/* PC Engines ALIX */
+		{ "tinyBIOS", 0, 28 },		/* tinyBIOS V1.4a (C)1997-2005 */
+		{ NULL, 0, 0 },
+	}
+};
+
 static struct bios_oem bios_advantech = {
 	{ 0xfe000, 0xff000 },
 	{
@@ -117,6 +126,11 @@
 	}
 
 	a = rdmsr(0x5140000c);
+	if (bit >= 16) {
+		a += 0x80;
+		bit -= 16;
+	}
+
 	if (onoff)
 		outl(a, 1 << bit);
 	else
@@ -242,11 +256,13 @@
 			 * by the bios, see p161 in data sheet.
 			 */
 			cba = pci_read_config(self, 0x64, 4);
-			printf("Geode CBA@ 0x%x\n", cba);
+			if (bootverbose)
+				printf("Geode CBA@ 0x%x\n", cba);
 			geode_counter = cba + 0x08;
 			outl(cba + 0x0d, 2);
-			printf("Geode rev: %02x %02x\n",
-				inb(cba + 0x3c), inb(cba + 0x3d));
+			if (bootverbose)
+				printf("Geode rev: %02x %02x\n",
+					inb(cba + 0x3c), inb(cba + 0x3d));
 			tc_init(&geode_timecounter);
 			EVENTHANDLER_REGISTER(watchdog_list, geode_watchdog,
 			    NULL, 0);
@@ -255,13 +271,14 @@
 	case 0x0510100b:
 		gpio = pci_read_config(self, PCIR_BAR(0), 4);
 		gpio &= ~0x1f;
-		printf("Geode GPIO@ = %x\n", gpio);
-		if ( bios_oem_strings(&bios_soekris,
-					bios_oem, BIOS_OEM_MAXLEN) > 0 ) {
+		if (bootverbose)
+			printf("Geode GPIO@ = %x\n", gpio);
+		if (bios_oem_strings(&bios_soekris,
+		     bios_oem, sizeof bios_oem) > 0 ) {
 			led1b = 20;
 			led1 = led_create(led_func, &led1b, "error");
-		} else if ( bios_oem_strings(&bios_pcengines,
-					bios_oem, BIOS_OEM_MAXLEN) > 0 ) {
+		} else if (bios_oem_strings(&bios_pcengines,
+		    bios_oem, sizeof bios_oem) > 0 ) {
 			led1b = -2;
 			led2b = -3;
 			led3b = -18;
@@ -274,27 +291,41 @@
 		 	*/
 			led_func(&led1b, 1);
 		}
-		if ( strlen(bios_oem) )
+		if (*bios_oem)
 			printf("Geode %s\n", bios_oem);
 		break;
 	case 0x01011078:
-		if ( bios_oem_strings(&bios_advantech,
-				bios_oem, BIOS_OEM_MAXLEN) > 0 ) {
+		if (bios_oem_strings(&bios_advantech,
+		    bios_oem, sizeof bios_oem) > 0 ) {
 			printf("Geode %s\n", bios_oem);
 			EVENTHANDLER_REGISTER(watchdog_list, advantech_watchdog,
 			    NULL, 0);
 		}
 		break;
 	case 0x20801022:
-		if ( bios_oem_strings(&bios_soekris_55,
-		    bios_oem, BIOS_OEM_MAXLEN) > 0 ) {
-			printf("Geode LX: %s\n", bios_oem);
+		if (bios_oem_strings(&bios_soekris_55,
+		    bios_oem, sizeof bios_oem) > 0 ) {
 			led1b = 6;
 			led1 = led_create(cs5536_led_func, &led1b, "error");
+		} else if (bios_oem_strings(&bios_pcengines_55,
+		    bios_oem, sizeof bios_oem) > 0 ) {
+			led1b = -6;
+			led2b = -25;
+			led3b = -27;
+			led1 = led_create(cs5536_led_func, &led1b, "led1");
+			led2 = led_create(cs5536_led_func, &led2b, "led2");
+			led3 = led_create(cs5536_led_func, &led3b, "led3");
+			/*
+		 	* Turn on first LED so we don't make
+			* people think their box just died.
+		 	*/
+			cs5536_led_func(&led1b, 1);
 		}
-		printf("MFGPT bar: %jx\n", rdmsr(0x5140000d));
-		EVENTHANDLER_REGISTER(watchdog_list, cs5536_watchdog,
-		    NULL, 0);
+		if (*bios_oem)
+			printf("Geode LX: %s\n", bios_oem);
+		if (bootverbose)
+			printf("MFGPT bar: %jx\n", rdmsr(0x5140000d));
+		EVENTHANDLER_REGISTER(watchdog_list, cs5536_watchdog, NULL, 0);
 		break;
 	}
 	return (ENXIO);
--- sys/pci/if_vr.c.orig	2009-07-21 22:40:43.000000000 +0200
+++ sys/pci/if_vr.c	2010-04-11 18:09:12.000000000 +0200
@@ -422,22 +422,34 @@
 static void
 vr_setcfg(struct vr_softc *sc, int media)
 {
-	int	restart = 0;
+	int	i;
 
 	VR_LOCK_ASSERT(sc);
+	
+	if (IFM_SUBTYPE(media) != IFM_NONE) {	
+		if (CSR_READ_2(sc, VR_COMMAND) & (VR_CMD_TX_ON|VR_CMD_RX_ON))
+			VR_CLRBIT16(sc, VR_COMMAND,
+			    (VR_CMD_TX_ON|VR_CMD_RX_ON));
 
-	if (CSR_READ_2(sc, VR_COMMAND) & (VR_CMD_TX_ON|VR_CMD_RX_ON)) {
-		restart = 1;
+		if ((media & IFM_GMASK) == IFM_FDX)
+			VR_SETBIT16(sc, VR_COMMAND, VR_CMD_FULLDUPLEX);
+		else
+			VR_CLRBIT16(sc, VR_COMMAND, VR_CMD_FULLDUPLEX);
+		
+ 		VR_SETBIT16(sc, VR_COMMAND, VR_CMD_TX_ON|VR_CMD_RX_ON);
+	} else {		
 		VR_CLRBIT16(sc, VR_COMMAND, (VR_CMD_TX_ON|VR_CMD_RX_ON));
+		for (i = VR_TIMEOUT; i > 0; i--) {
+			DELAY(10);
+			if (!(CSR_READ_2(sc, VR_COMMAND) &
+			    (VR_CMD_TX_ON|VR_CMD_RX_ON)))
+				break;
+		}
+		if (i == 0) {
+			device_printf(sc->vr_dev, "rx shutdown error!\n");
+			sc->vr_flags |= VR_F_RESTART;
+		}
 	}
-
-	if ((media & IFM_GMASK) == IFM_FDX)
-		VR_SETBIT16(sc, VR_COMMAND, VR_CMD_FULLDUPLEX);
-	else
-		VR_CLRBIT16(sc, VR_COMMAND, VR_CMD_FULLDUPLEX);
-
-	if (restart)
-		VR_SETBIT16(sc, VR_COMMAND, VR_CMD_TX_ON|VR_CMD_RX_ON);
 }
 
 static void
